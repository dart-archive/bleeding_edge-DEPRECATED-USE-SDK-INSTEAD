<!--
This build script will build the Dart RCP and Dart update site.

This script will setup the PDE build structure and then call into the PDE
build system.  The PDE build system has to run under Eclipse.
-->
<project name="build_dart" default="build_rcp">

    <import file="build-common.xml" />

    <target name="deploy_rcp" depends="build_rcp, doDeploy_rcp" />

    <target name="build_rcp" depends="init, setupBuild, doBuild_rcp, package_rcp" />

    <!-- - - - - - - - - - - - - - - - - -
          target: buildBot
         - - - - - - - - - - - - - - - - - -->
    <target name="buildBotFastFail">
        <echoProperty propertyname="user.name" />
        <echoProperty propertyname="build.root" />
        <echoProperty propertyname="build.out" />
        <echoProperty propertyname="build.source" />
        <echoProperty propertyname="build.running.headless" />

        <!-- build.running.headless is set by the python build script
             this will only be set to false if running a local build -->
        <property name="build.running.headless" value="false" />
        <!-- only download the sdk if this is a local build -->
        <condition property="build.download.sdk">
            <isfalse value="${build.running.headless}" />
        </condition>

        <fail>
            <condition>
                <and>
                    <istrue value="${build.running.headless}" />
                    <not>
                        <and>
                            <isset property="build.root" />
                            <isset property="build.out" />
                            <isset property="build.source" />
                        </and>
                    </not>
                </and>
            </condition>
            This code is running under BuildBot and the following properties are not set at the
            start of the build:
            build.root
            build.out
            build.source
            These properties should have been set by the Python code
        </fail>
        <echoProperty propertyname="build.download.sdk" />
    </target>

    <!--
    initializethe build environment by cleaning up the builchrome-botd.tmp directory and
    creating the needed directories
    -->
    <target name="init" depends="setOS, buildBotFastFail, readProperties">
        <property environment="env" />

        <tstamp>
            <format property="build.date" pattern="yyyyMMddHHmm" />
        </tstamp>
        <tstamp>
            <format property="build.date.ymd" pattern="yyyy-MM-dd" />
        </tstamp>
        <tstamp>
            <format property="build.year" pattern="yyyy" />
        </tstamp>
        <echoProperty propertyname="build.osgi.arch"/>
        <echoProperty propertyName="ant.file" />
        <echoProperty propertyName="ant.home" />
        <echoProperty propertyName="ant.version" />
        <echoProperty propertyName="java.home" />
        <echoProperty propertyName="java.vendor" />
        <echoProperty propertyName="java.version" />
        <echoProperty propertyName="user.name" />
        <echoProperty propertyName="dataLocation" />
        <condition property="data.location" value="${dataLocation}">
            <isset property="dataLocation" />
        </condition>

        <!--
          validate the the build.source is correctly set
          by verifying that ${build.source}/docs/README.txt exists
        -->
        <fail>*
            **********************************
            Error:
            build.source must point to [svnroot]/dart/editor (root of the Dart Editor source tree)
            as obtained from http://code.google.com/p/dart/wiki/GettingTheSource?tm=4
            Current value: ${build.source}.
            **********************************
            <condition>
                <not>
                    <available file="${build.source}/docs/README.txt" type="file" />
                </not>
            </condition>
        </fail>

        <!-- parse the tools/VERSION file into an ant property -->
        <!-- the format is "MAJOR x\nMINOR x\nPATCH n" -->
        <loadproperties srcFile="${build.source}/../tools/VERSION">
            <filterchain>
                <replaceregex pattern=" " replace="="/>
            </filterchain>
        </loadproperties>
        <property name="dart.version" value="${MAJOR}.${MINOR}.${PATCH}" />

        <condition property="build.revision" value="${env.BUILDBOT_GOT_REVISION}">
            <isset property="env.BUILDBOT_GOT_REVISION" />
        </condition>
        <property name="build.revision" value="000" />
        <property name="dart.version_revision" value="${dart.version}_${build.revision}" />

        <dirname file="${build.source}" property="build.source.root"/>

        <property name="build.thirdparty" location="${build.source.root}/third_party" />

        <property name="build.stage.scripts" location="${build.stage}/scripts" />
        <!-- echoproperties prefix="java." / -->
        <!-- echoproperties prefix="build." / -->
        <property name="build.runtime.abs" location="${build.runtime}" />
        <property name="build.target.abs" location="${build.target}" />
        <property name="build.stage.abs" location="${build.stage}" />
        <property name="build.out.property.file"
                  value="${java.io.tmpdir}/dart-build.properties" />
        <echoproperties prefix="build." destfile="${build.out.property.file}"/>
        <echoProperty propertyName="eclipse-sdk.3.8.url" />
        <echoProperty propertyName="eclipse-sdk.3.8.linux.gtk.x86.zip" />
        <echoProperty propertyName="eclipse-sdk.3.7.url" />
        <echoProperty propertyName="eclipse-sdk.3.7.linux.gtk.x86.zip" />
        <!--
        cleanup build directories
        -->
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${build.tmp}" />
            <!-- fileset dir="${build.out}" / -->
        </delete>
        <!--
        create the build structure
        -->
        <mkdir dir="${build.downloads}" />

        <mkdir dir="${build.runtime}" />
        <mkdir dir="${build.target}" />
        <mkdir dir="${build.stage.plugins}" />
        <mkdir dir="${build.stage.features}" />
        <mkdir dir="${build.out}" />

        <property name="build.dart.sdk" value="true"/>

        <echoProperty propertyname="build.revision" />
        <echoProperty propertyname="build.channel" />
        <echoProperty propertyname="build.builder" />
        <echoProperty propertyname="build.root" />
        <echoProperty propertyname="build.out" />
        <echoProperty propertyname="build.source" />
        <echoProperty propertyname="build.source.root"/>
        <echoProperty propertyname="build.out.property.file" />
        <echoProperty propertyname="build.os" />
        <echoProperty propertyname="build.dart.sdk.zip" />
        <echoProperty propertyname="build.download.sdk" />
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          target: buildSamples
          Copy sample Dart libraries from the SVN tree into a new "samples" directory

          ant properties required
           build.source.root = the SVN root directory
           build.stage.include.dir = required iff samples.out.dir is not already defined

          ant properties set
           samples.out.dir = the destination "samples" directory, created by this target

         - - - - - - - - - - - - - - - - - -->
    <target name="buildSamples">
        <!-- create the samples directory -->
        <property name="samples.out.dir" value="${build.stage.include.dir}/samples" />

        <!-- delete old samples -->
        <delete dir="${samples.out.dir}"/>

        <!-- copy specific samples -->
        <copy todir="${samples.out.dir}">
            <fileset dir="${build.source.root}/samples">
                <include name="dartiverse_search/**"/>
                <include name="sunflower/**"/>
                <include name="pop_pop_win/**"/>

                <!-- the READMEs are out of date -->
                <exclude name="**/README"/>

                <!-- the included samples aren't under revision control -->
                <exclude name="**/.gitignore"/>

                <!-- We do not need to ship the test directories. -->
                <exclude name="**/test/"/>
            </fileset>
            <fileset dir="${build.source.root}/samples/third_party">
                <include name="todomvc/**"/>
                <include name="angular_todo/**"/>
                <exclude name="**/tool/"/>
                <exclude name="**/.git/"/>
                <exclude name="**/.gitignore"/>
                <exclude name="**/test/"/>
                <exclude name="**/app_package/"/>
                <exclude name="**/resouce/"/>
            </fileset>
        </copy>

        <!-- download and setup the html5 examples -->
        <!-- TODO(devoncarew): enable when we have more confidence in the html5 samples -->
        <!-- property name="html5.archive" value="${build.stage.include.dir}/html5.zip" />

        <get src="https://github.com/dart-lang/dart-html5-samples/zipball/master"
          dest="${html5.archive}"
          usetimestamp="true" />

        <unzip src="${html5.archive}" dest="${samples.out.dir}/html5">
            <patternset>
                <exclude name="**/.gitignore"/>
            </patternset>
            <cutdirsmapper dirs="1"/>
        </unzip>

        <delete file="${html5.archive}"/ -->

        <!-- copy the dart.js file into the samples directory -->
        <copy todir="${samples.out.dir}" file="${build.source.root}/pkg/browser/lib/dart.js"/>
    </target>

    <!-- - - - - - - - - - - - - - - - - - -
          target: installSdk
          Install the sdk zip unless a path to an SDK exists - build.dart.sdk.
         - - - - - - - - - - - - - - - - - -->
    <target name="installSdk" unless="build.dart.sdk" depends="setOS">
        <echoProperty propertyname="build.dart.sdk"/>

        <get src="http://storage.googleapis.com/dart-archive/channels/be/raw/latest/sdk/dartsdk-${osfamily}-ia32-release.zip"
             dest="${build.dart.sdk.zip}"
             usetimestamp="true" />

        <echo message="unzipping ${build.dart.sdk.zip} to ${build.stage.include.dir}"/>
        <mkdir dir="${build.stage.include.dir}" />
        <delete dir="${build.stage.include.dir}/dart-sdk"/>
        <exec executable="${unzip.tool}" dir="${build.stage.include.dir}">
            <arg value="${unzip.arg}"/>
            <arg value="${build.dart.sdk.zip}"/>
        </exec>
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          target: setupDevWorkspace
         - - - - - - - - - - - - - - - - - -->
    <target name="setupDevWorkspace"
            depends="initDevWorkspace, buildSamples, installSdk">
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          target: initDevWorkspace
         - - - - - - - - - - - - - - - - - -->
    <target name="initDevWorkspace">
        <!-- This build script must be executed in Eclipse
          so that the ${eclipse.home} Ant property is defined -->
        <fail unless="eclipse.home">*
            **********************************
            Execute this Ant script inside Eclipse
            and select the 'Run in the same JRE as the workspace' option
            on the 'JRE' tab of the launch dialog
            -- OR --
            Define the "eclipse.home" property to point to your Eclipse installation
            **********************************
        </fail>

        <property name="build.stage.include.dir" location="${eclipse.home}"/>
        <property name="build.dart.sdk.zip" location="${eclipse.home}/dart-sdk.zip"/>
        <property name="samples.out.dir" location="${eclipse.home}/samples"/>
        <!-- Force SDK download to ensure we have the latest -->
        <property name="build.download.sdk" value="true"/>

        <condition property="build.os" value="win32">
            <os family="windows"/>
        </condition>
        <condition property="build.os" value="macos">
            <os family="mac"/>
        </condition>
        <condition property="build.os" value="linux">
            <os family="unix"/>
        </condition>

        <property name="data.location" location="./build-settings" />
        <property name="user.os.property.file" location="${data.location}/${user.name}.${build.os}.properties" />
        <echo message="reading ${user.os.property.file}" />
        <property file="${user.os.property.file}" />
        <property name="user.property.file" location="${data.location}/${user.name}.properties" />
        <echo message="reading ${user.property.file}" />
        <property file="${user.property.file}" />

        <!-- The path to dart/editor/ -->
        <property name="build.source" location="../../.." />
        <dirname property="build.source.root" file="${build.source}" />

        <echoProperty propertyname="build.source" />
        <echoProperty propertyname="build.source.root" />
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          target: setupRuntimeEclipse
         - - - - - - - - - - - - - - - - - -->
    <target name="setupRuntimeEclipse">
        <setupEclipse location="${build.runtime}" version="${build.runtime.eclipse.version}"
                      arch="${build.eclipse.arch}" os.ws="${build.eclipse.os.ws}" />
        <fileset dir="${build.runtime}/eclipse/plugins" id="launcherFs" >
            <include name="*launcher_*.jar" />
        </fileset>
        <pathconvert property="eclipse.runtime.launcher.jar" refid="launcherFs" />
    </target>

    <!--
    copy the code from the svn structure to the PDE structure and get rid of the linked resources
    -->
    <target name="setupBuild" depends="init, installSdk, setupRuntimeEclipse, buildSamples" >
        <setupTargetEclipse location="${build.target}" eclipse="${build.target.eclipse.version}"
                            arch="${build.eclipse.arch}" />

        <property name="eclipse.runtime.dir"
                  value="${build.runtime}/eclipse" />
        <mkdir dir="${build.stage.plugins}" />
        <mkdir dir="${build.stage.features}" />

        <copy todir="${build.stage.plugins}">
            <fileset dir="${build.source}/tools/plugins">
                <!-- these are for the plugins distribution -->
                <exclude name="com.google.dart.eclipse.core/**" />
                <exclude name="com.google.dart.eclipse.ui/**" />

                <!-- excluded to avoid a dependency on org.eclipse.wb -->
                <exclude name="com.google.dart.tools.designer/**" />

                <!-- exclude swtbot for now -->
                <exclude name="com.google.dart.tools.ui.swtbot_test/**" />

                <exclude name="**/bin/**" />
            </fileset>
        </copy>

        <copy todir="${build.stage.features}">
            <fileset dir="${build.source}/tools/features">
                <exclude name="*.tests.*/**" />
            </fileset>
        </copy>

        <replace dir="${build.stage.features}/com.google.dart.tools.deploy.feature">
            <include name="*.html" />
            <include name="*.mappings" />
            <replacefilter token="@BUILDDATE@" value="${build.date.ymd}" />
            <replacefilter token="@REVISION@" value="${build.revision}" />
            <replacefilter token="@BUILDYEAR@" value="${build.year}" />
        </replace>

        <echo message="replacing @BUILDCONFIGS@ in ${build.stage.features}/com.google.dart.tools.deploy.feature_releng/build.properties" />
        <replace dir="${build.stage.features}/com.google.dart.tools.deploy.feature_releng">
            <include name="build.properties" />
            <replacefilter token="@BUILDCONFIGS@" value="${build.configs}" />
        </replace>

        <echo message="replacing @VERSION_QUALIFIER@ in ${build.stage.features}/com.google.dart.tools.deploy.feature_releng/build.properties" />
        <replace dir="${build.stage.features}/com.google.dart.tools.deploy.feature_releng">
            <include name="build.properties" />
            <replacefilter token="@VERSION_QUALIFIER@" value="${build.version.qualifier}" />
        </replace>

        <replace dir="${build.stage.plugins}/com.google.dart.tools.core" >
            <include name="**/DartCore.java" />
            <replacefilter token="@BUILDDATE@" value="${build.date.ymd}" />
            <replacefilter token="@REVISION@" value="${build.revision}" />
        </replace>

        <echo message="replacing @CHANNEL@ in ${build.stage.plugins}/com.google.dart.tools.core/update.properties" />
        <replace dir="${build.stage.plugins}/com.google.dart.tools.core" >
            <include name="update.properties" />
            <replacefilter token="@CHANNEL@" value="${build.channel}" />
        </replace>

        <echo message="replacing @BUILDYEAR@ in ${build.stage.plugins}/com.google.dart.tools.ui/src/com/google/dart/tools/ui/dialogs/DialogsMessages.properties" />
        <replace dir="${build.stage.plugins}/com.google.dart.tools.ui" summary="true">
            <include name="**/ui/dialogs/*.properties" />
            <replacefilter token="@BUILDYEAR@" value="${build.year}" />
        </replace>

        <replace dir="${build.stage.features}">
            <include name="**/feature.xml"/>
            <replacefilter token="0.0.1.qualifier" value="${dart.version}.qualifier" />
            <replacefilter token="0.0.0.qualifier" value="${dart.version}.qualifier" />
        </replace>
        <replace dir="${build.stage.plugins}">
            <include name="**/MANIFEST.MF"/>
            <replacefilter token="0.0.1.qualifier" value="${dart.version}.qualifier" />
            <replacefilter token="0.0.0.qualifier" value="${dart.version}.qualifier" />
        </replace>

        <!-- remove Eclipse symlinks -->

        <!-- com.google.dart.thirdparty -->
        <property name="dart.thirdparty.dir"
                  value="${build.stage.plugins}/com.google.dart.thirdparty" />
        <copy todir="${dart.thirdparty.dir}/lib">
            <fileset dir="${build.source.root}/third_party">
                <include name="args4j/**" />
                <include name="commons-lang/**" />
                <include name="guava/**" />
                <include name="json/**" />
                <include name="snakeyaml/**" />
            </fileset>
        </copy>

        <!-- com.google.dart.thirdparty_test -->
        <property name="dart.thirdparty_test.dir"
                  value="${build.stage.plugins}/com.google.dart.thirdparty_test" />
        <copy todir="${dart.thirdparty_test.dir}/lib">
            <fileset dir="${build.source.root}/third_party">
                <include name="fest/**" />
                <include name="mockito/**" />
            </fileset>
        </copy>

    </target>

    <!-- - - - - - - - - - - - - - - - - -
          target: doBuild_rcp
         - - - - - - - - - - - - - - - - - -->
    <target name="doBuild_rcp" depends="init, setupBuild">
        <dirset dir="${build.runtime}/eclipse/plugins" id="pde.ds">
            <include name="*pde.build_*" />
        </dirset>
        <pathconvert property="pde.build.dir" refid="pde.ds" setonempty="false"/>
        <property name="pde.scripts.update" location="${pde.build.dir}/scripts" />
        <property name="pde.scripts.rcp" location="${pde.build.dir}/scripts/productBuild" />
        <echo message="PDE is located in ${pde.build.dir}" />
        <mkdir dir="${build.stage.scripts}" />
        <copy todir="${build.stage.scripts}">
            <fileset  dir="${build.stage.features}/com.google.dart.tools.deploy.feature_releng">
                <include name="build.properties" />
            </fileset>
        </copy>
        <runAntBuildInEclipse script="${pde.scripts.rcp}/productBuild.xml" eclipse="3.7"
                              builddir="${build.stage.scripts}" />
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          target: package_rcp
         - - - - - - - - - - - - - - - - - -->
    <target name="package_rcp" depends="init, setupBuild, doBuild_rcp" >
        <property file="build.properties" prefix="pde." />
        <echo message="copying zip files from ${build.stage}/${pde.buildLabel} to ${build.out}"/>
        <copy todir="${build.out}" verbose="true">
            <fileset dir="${build.stage}/${pde.buildLabel}">
                <include name="*.zip" />
            </fileset>
        </copy>
        <!--
          {
            "revision" : "9826",
            "version"  : "0.1.2.0_r13602",
            "date"     : "2012-07-09"
          }
        -->
        <echo message="creating build VERSION file"/>
        <echo file="${build.out}/VERSION">{
  "revision": "${build.revision}",
  "version" : "${dart.version.full}",
  "date"    : "${build.date}"
}</echo>
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          target: doDeploy_rcp
         - - - - - - - - - - - - - - - - - -->
    <target name="doDeploy_rcp" depends="init, setupBuild, doBuild_rcp, package_rcp">
    </target>

</project>
