// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// WARNING: Do not edit - generated code.

#ifndef Dart$(INTERFACE)_h
#define Dart$(INTERFACE)_h

#include "bindings/v8/ActiveDOMCallback.h"
#include "bindings/dart/DartCallback.h"
#include "bindings/dart/DartDOMWrapper.h"
#include "$(INTERFACE).h"

namespace WebCore {

class Dart$(INTERFACE) : public $(INTERFACE), public ActiveDOMCallback {
public:
    typedef Dart$(INTERFACE) NativeType;

    static PassOwnPtr<NativeType> create(Dart_Handle object, Dart_Handle& exception)
    {
        return adoptPtr(new Dart$(INTERFACE)(object, exception, DartUtilities::scriptExecutionContext()));
    }

    static PassOwnPtr<NativeType> createWithNullCheck(Dart_Handle object, Dart_Handle& exception)
    {
        if (Dart_IsNull(object))
            return PassOwnPtr<NativeType>();
        return create(object, exception);
    }

    static PassOwnPtr<NativeType> create(Dart_NativeArguments args, int idx, Dart_Handle& exception)
    {
        Dart_Handle object = Dart_GetNativeArgument(args, idx);
        return create(object, exception);
    }

    static PassOwnPtr<NativeType> createWithNullCheck(Dart_NativeArguments args, int idx, Dart_Handle& exception)
    {
        Dart_Handle object = Dart_GetNativeArgument(args, idx);
        if (Dart_IsNull(object))
            return PassOwnPtr<NativeType>();
        return create(object, exception);
    }

$HANDLERS

private:
    Dart$(INTERFACE)(Dart_Handle object, Dart_Handle& exception, ExecutionContext* context)
        : ActiveDOMCallback(context)
        , m_callback(object, exception)
    {
    }

    DartCallback m_callback;
};

}

#endif // Dart$(INTERFACE)_h
