import gclient_utils
import os

path = gclient_utils.FindGclientRoot(os.getcwd())
execfile(os.path.join(path, 'multivm.deps', 'DEPS.chromium')) # Include proper Chromium DEPS.

# Now we need to override some settings and add some new ones.

vars.update({
  "chromium_url": "http://src.chromium.org/svn",
  "multivm_base": "http://src.chromium.org",
  "multivm_chromium_branch": "/chrome/trunk/src",
  "multivm_chromium_revision": "260298",
  "chromium_base_revision": "260298",
  "perf_scripts_dart_branch": "/branches/bleeding_edge/dart/tools/bots",
  "multivm_blink_branch": "/blink/branches/dart/multivm",
  "multivm_blink_revision": "170696",
})

def massage_deps(deps):
  for key, value in deps.items():
    if value is None: continue

    if value.startswith('/trunk'):
      deps[key] = Var("chromium_url") + value
      continue

    if value.startswith(Var("webkit_trunk")):
      path, revision = value.split('@') # and svn revision.
      path = path[len(Var("webkit_trunk")):]  # Strip WebKit repo.
      value = (Var("multivm_base") + Var("multivm_blink_branch") + path +
               '@' + Var("multivm_blink_revision"))
      deps[key] = value
      continue

massage_deps(deps)
for os_deps in deps_os.values():
  massage_deps(os_deps)

deps.update({
  "src":
    Var("multivm_base") + Var("multivm_chromium_branch") + "@" +
        Var("multivm_chromium_revision"),
  "src/dart/tools/bots": Var("perf_scripts_dart_branch"),
})

deps_os['win'].update({
  "src/chrome/tools/test/reference_build/chrome_win": None
})
deps_os['mac'].update({
  "src/chrome/tools/test/reference_build/chrome_mac": None
})
deps_os['unix'].update({
  "src/chrome/tools/test/reference_build/chrome_linux": None
})

hooks.append({
  # Set the revision for a lazily downloaded reference build of chromium,
  # with which to run perf tests.
  'name': 'set_reference_build',
  'pattern': '.',
  'action': ['python',
             'src/dart/tools/bots/set_reference_build_revision.py',
             Var('chromium_base_revision')],
})
